22/2/2018 9:05:06 AM

Array 

convert String to Integer
	whatver value enter at the time all the value trited as string value
thats why we need to convert string into integer

Arrays Overview

array is user defing type which is used to store single name or same name
array index is start with 0

in C# array is aslo called Referenced type
there are diff type of arrays 
	single dimension arrays
	two dimension arrays
	in this array all the element(row & col) is fixed 
	we need to set created time 

	Zagged Array
	array of array is called zagged array
	only number of row is fixed


 An array contains zero or more items called elements. An array is an unordered sequence of elements. All the elements in an array are of the same type (unlike fields in a class that can be of different types). The elements of an array accessed using an integer index that always starts from zero. C# supports single-dimensional (vectors), multidimensional and jagged arrays. 

 Elements are identified by indexes relative to the beginning of the arrays. An index is also commonly called indices or subscripts and are placed inside the indexing operator ([]). Access to array elements is by their index value that ranges from 0 to (length-1).

Array Properties
The length cannot be changed once created.
Elements are initialized to default values.
Arrays are reference types and are instances of System.Array.
Their number of dimensions or ranks can be determined by the Rank property.
An array length can be determined by the GetLength() method or Length property.


Generics 
it is introduced from .net fw 2.0
it presert in System.Collection.Generic
to work with generics with two tings 
	palceholder
	type parameter
		it enclosed with the parameter
generics are used to avoid function overloading where data type and arguments are change 
Generics are most frequently used with collections and the methods that operate on them.
Version 2.0 of the .NET Framework class library provides a new namespace, System.Collections.Generic, which contains several new generic-based collection classes.
You can create your own generic interfaces, classes, methods, events, and delegates
You may create generic classes constrained to enable access to methods on particular data types.
You may get information on the types used in a generic data type at run-time by means of reflection.

there are 4 point remember 

Constraints specifies the kind of types allowed with the generics
Constraints can be applied using the where keyword
Six types of constraints can be applied: class, struct, new(), base class name, interface and derived type
Multiple constraints also can be applied